#!/bin/bash

##############################################################################################################################
#                                                                                                                            #
# DESCRIPTION: an ugly tool to provide some git updates with multiple repositories in one dir                                #
# MODES: recursive & depth1 (see help)                                                                                       #
#                                                                                                                            #
# NOTE: if the -depth 1 option is not available, try -mindepth 1 -maxdepth 1.                                                #
# find . -maxdepth 1 -type d -not -path "." -not -path ".." -exec echo $DIR/{} \;                                            #
# find . -maxdepth 1 -type d -not -path "." -not -path ".." -exec git --git-dir={}/.git --work-tree=$DIR/{} status \;        #
# find . -maxdepth 1 -type d -not -path "." -not -path ".." \                                                                #
#    \( -exec sh -c 'echo Path: $DIR/{}; false' \; -false \                                                                  #
#    -o -exec git --git-dir={}/.git --work-tree=$DIR/{} pull --no-edit \; \)                                                 #
#                                                                                                                            #
##############################################################################################################################

# transform long options to short ones
for arg in "$@"; do
    shift
    case "$arg" in
        "--dir")            set -- "$@" "-d" ;;
        "--help")           set -- "$@" "-h" ;;
        "--write-remotes")  set -- "$@" "-w" ;;
        "--prune")          set -- "$@" "-p" ;;
        "--submodules")     set -- "$@" "-s" ;;
        "--remotes-file")   set -- "$@" "-f" ;;
        "--local-branches") set -- "$@" "-l" ;;
        "--recursive")      set -- "$@" "-r" ;;
        *)                  set -- "$@" "$arg" ;;
    esac
done


# defaults
DIR="";
HELP=0;
WRITE_REMOTES=0;
REMOTES_FILE="git_remotes.sh";
PRUNE=0;
SUBMODULES=0;
LOCAL_BRANCHES_UPDATE=0;
RECURSIVE=0


# and parse at least
while getopts 'd:hwpslrf:' opt; do
    case $opt in
        d) DIR=$OPTARG
           ;;
        h) HELP=1
           ;;
        w) WRITE_REMOTES=1
           ;;
        p) PRUNE=1
           ;;
        s) SUBMODULES=1
           ;;
        f) REMOTES_FILE=$OPTARG
           ;;
        l) LOCAL_BRANCHES_UPDATE=1
           ;;
        r) RECURSIVE=1
           ;;
        \?) echo "Unknown option: -$OPTARG" >&2;
             exit 1
             ;;
        :) echo "Missing option argument for -$OPTARG" >&2;
            exit 1
            ;;
        *) echo "Unimplemented option: -$OPTARG" >&2;
            exit 1
            ;;
    esac
done


shift "$((OPTIND-1))";
# params after '--' to ARGV
[ "${1:-}" = "--" ] && shift;


if [ "$HELP" -eq 1 ]; then
    USAGE=$(cat << EOF
Usage: $(basename $0) [OPTIONS]\n
\n
Options:\n
    -d, Specify parent dir to search for repos (mandatory option)\n
    -h, Show this text\n
    -w, Write remotes to file as ready to clone sh script\n
    -p, Prune non existing branches at remote\n
    -s, Also update git submodules\n
    -l, Update all local branches to their upstream ff-only\n
    -f <FILE>, write remotes to specified file\n
    -r find repositories recursively and update them\n
\n
Long alternative options:\n
    --dir <PATH>\n
    --help\n
    --write-remotes\n
    --prune\n
    --submodules\n
    --local-branches\n
    --remotes-file <FILE>\n
    --recursive\n
\n
Examples:\n
    pull_all -d ~/gitrepos -p -s -l\n
    Bundling options:\n
    pull_all -d ~/gitrepos -psl\n
    Write remotes of repo list to specified file:\n
    pull_all -d ~/gitrepos -w -f remotes_file.sh\n
    Same with long opts:\n
    pull_all --dir ~/gitrepos --write-remotes --remotes-file remotes_file.sh\n
    With specified dir\n
    pull_all --dir /home/user/gitrepos\n
EOF
         );
    echo $USAGE;
    exit 0;
fi


# dir option must have
if [ ! "$DIR" ]; then
    echo "Mandatory argument -d (--dir) missing" >&2;
    exit 1;
elif [ ! -d "$DIR" ]; then
    echo "Dir [$DIR] not found, nothing to do.";
    exit 1;
fi


main() {
    if [ "$RECURSIVE" -eq 1 ]; then
        recursive;
    else
        depth1;
    fi
}


depth1() {
    # collect repo links and write sh file as ready to git clone command
    # NOTE: works only with 'origin' remote name
    if [ "$WRITE_REMOTES" -eq 1 ]; then
        echo "Collecting repos links, writing to clone...";
        echo "#!/bin/bash" > $REMOTES_FILE;
        find $DIR -maxdepth 1 -type d -not -path "." -not -path ".." -not -path "$DIR" \
            | sort | uniq | \
            xargs -I % sh -c 'FILE="%"; echo "git clone $(git -C $DIR/$FILE remote get-url origin)"' >> $REMOTES_FILE;
        chmod +x $REMOTES_FILE;
        exit 0;
    fi


    # NOTE: since git 1.8.5 we can do the next thing
    # find . -maxdepth 1 -type d -not -path "." -not -path ".." \
        # -exec sh -c 'echo Path: $DIR/{}; true' \; -exec git -C {} pull --no-edit --all \;

    # update main repositories (always)
    echo -e "\033[92mUpdating repositories...\033[0m";
    find $DIR -maxdepth 1 -type d -not -path "." -not -path ".." -not -path "$DIR" \
         -exec sh -c 'echo Path: {}; true' \; \
         -exec git --git-dir={}/.git --work-tree={} pull --no-edit --all \; 2>/dev/null

    # prune non existing remote branches (-p arg)
    # NOTE: to prune automatically on fetch or pull needs to set git config option:
    # git config remote.origin.prune true
    if [ "$PRUNE" -eq 1 ]; then
        echo -e "\033[95mPrune non existing branches...\033[0m";
        find $DIR -maxdepth 1 -type d -not -path "." -not -path ".." -not -path "$DIR" \
             -exec sh -c 'echo Path: {}; true' \; \
             -exec git --git-dir={}/.git --work-tree={} fetch -p --all \; 2>/dev/null
    fi

    # submodules update (-s arg)
    if [ "$SUBMODULES" -eq 1 ]; then
        echo -e "\033[91mUpdating submodules...\033[0m";
        SED="sed";
        case "$OSTYPE" in
            *darwin*)
                SED="gsed"
                ;;
        esac
        # if [ -z "${OSTYPE##*darwin*}" ]; then
        # SED="gsed"
        # fi
        find $DIR -type f -name '.gitmodules' \
            | $SED -r 's|/[^/]+$||' | sort | uniq \
            | xargs -I % sh -c 'FILE="%"; echo Path: $FILE; git -C $FILE submodule update --remote --recursive --merge'; 2>/dev/null
    fi

    # all local branches update to their remotes (-a arg)
    if [ "$LOCAL_BRANCHES_UPDATE" -eq 1 ]; then
        echo -e "\033[90mSync all local branches to their remotes...\033[0m";
        find $DIR -maxdepth 1 -type d -not -path "." -not -path ".." -not -path "$DIR" \
             -exec sh -c 'echo Path: {}; true' \; \
             -exec bash -c "git_ffwd {}" {} \; 2>/dev/null
    fi
}


recursive() {
    # TODO: implement prune, submodules, remotes write, etc.
    echo -e "\033[92mFinding and updating repositories recursively...\033[0m";
    find $DIR -type d -name ".git" \
         -exec sh -c 'echo Path: {}; true' \; \
         -exec git --git-dir={} --work-tree={} pull --no-edit --all \; 2>/dev/null
}


# a ffwd local branches update to their remotes func
git_ffwd() {
    REPO="$1";
    REMOTES=$(git --git-dir=$REPO/.git --work-tree=$REPO remote);
    REMOTES=$(echo "$REMOTES" | xargs -n1 echo);
    CLB=$(git --git-dir=$REPO/.git --work-tree=$REPO rev-parse --abbrev-ref HEAD);
    echo "$REMOTES" | while read REMOTE; do
        git --git-dir=$REPO/.git --work-tree=$REPO remote update $REMOTE;
        git --git-dir=$REPO/.git --work-tree=$REPO remote show $REMOTE -n \
            | awk '/merges with remote/{print $5" "$1}' \
            | while read RB LB; do
            ARB="refs/remotes/$REMOTE/$RB";
            ALB="refs/heads/$LB";
            NBEHIND=$(( $(git --git-dir=$REPO/.git --work-tree=$REPO rev-list --count $ALB..$ARB 2>/dev/null) +0));
            NAHEAD=$(( $(git --git-dir=$REPO/.git --work-tree=$REPO rev-list --count $ARB..$ALB 2>/dev/null) +0));
            if [ "$NBEHIND" -gt 0 ]; then
                if [ "$NAHEAD" -gt 0 ]; then
                    echo -e "\033[34mBranch $LB is $NBEHIND commit(s) behind and $NAHEAD commit(s) ahead of $REMOTE/$RB. Could not be fast-forwarded\033[0m";
                elif [ "$LB" = "$CLB" ]; then
                    echo -e "\033[34mBranch $LB was $NBEHIND commit(s) behind of $REMOTE/$RB. Fast-forward merge\033[0m";
                    git --git-dir=$REPO/.git --work-tree=$REPO merge -q $ARB;
                else
                    echo -e "\033[34mBranch $LB was $NBEHIND commit(s) behind of $REMOTE/$RB. Resetting local branch to remote\033[0m";
                    git --git-dir=$REPO/.git --work-tree=$REPO branch -f $LB -t $ARB >/dev/null;
                fi
            fi
        done
    done
}

# 'bash' required to export functions
export -f git_ffwd;

main "$@";
